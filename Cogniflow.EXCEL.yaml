name: Cogniflow
description: ''
host: EXCEL
api_set: {}
script:
  content: >
    const STATUS_PENDING = 0; //pending

    const STATUS_IN_QUEUE = 1; //waiting

    const STATUS_RUNNING = 2; //running

    const STATUS_FINISHED = 3; //ready

    const STATUS_CANCELED_BY_USER = 4; //canceled

    const STATUS_CANCELED_BY_TIMEOUT = 5; //timed out

    const STATUS_FINISHED_WITH_ERROR = 6; //error


    const QANDA_TASK = 3;


    const EXPERIMENT = {
      current: {},
      models: [{ name: "FFN Vectorization algorithm" }, { name: "Linear Regression" }],
      currentModel: {},
      query: "type=0&&sort=recent",
      list: [],
      showConfidence: false,
      insertPlace: "insertRight",
      colRange: "A2:A5",
      hasHeaders: true,
      publicExperiments: [],
      visibilityQuery: ""
    };

    const API_URL = "https://api.cogniflow.ai";

    const PREDICT_API_URL = "https://predict.cogniflow.ai";

    const logoBaseUrl =
    "https://s3.us-east-2.amazonaws.com/static-cogniflow-prod/";


    const EXPERIMENT_TASKS = {
      0: "Text classification",
      1: "Text Translation",
      2: "Entities recognition",
      3: "Question and answer",
      100: "Image classification",
      200: "Audio classification",
      201: "Audio speech to text"
    };


    const EXPERIMENT_TYPES = {
      0: "Text",
      1: "Image",
      2: "Audio"
    };


    const EXPERIMENT_TYPES_URL = {
      0: "text",
      1: "image",
      2: "audio"
    };


    const URL_TASK_MAP = {
      0: "classification/predict",
      1: "translation/translate",
      2: "information-extraction/extract-entities",
      3: "question-answering/ask",
      100: "classification/predict-from-web",
      200: "classification/predict-from-web",
      201: "classification/predict-from-web"
    };

    // Task based

    const REQUEST_BODY_KEYS = {
      0: "text",
      1: "text",
      3: "question"
    };


    let user = {};


    const pages = {
      login: {
        pageId: "page-login",
        goToSecretTokenAuth: "login-go-to-secret",
        gotToNormalAuth: "login-go-to-normal-auth",
        subPages: {
          defaultSubpage: "login-default-form",
          secretToken: "login-use-secret-token"
        },
        emailInput: "login-email-field",
        passwordInput: "login-password-field",
        loginButton: "default-login-button",
        invalidCredentials: "login-invalid-creds"
      },
      experiments: {
        pageId: "page-experiments",
        experimentCardsClassName: "experiment-card",
        cardsContainer: "experiment-cards-container",
        visibilityDropdown: "experiments-visibility-dropdown",
        typeDropdown: "experiments-type-dropdown",
        logoutBtn: "logout"
      },
      run: {
        pageId: "pages-run-model",
        goBack: "pages-run-model-go-back",

        confidenceDd: "run-show-confidence-checkbox",
        includeHeadersContainer: "run-include-headers-container",
        hasHeadersCb: "run-show-has-headers",
        insertDd: "run-insert-dropdown",
        modelDd: "run-model-dropdown",

        cellsRange: "run-cells-range",

        expValue: "experiment-value",
        confidenceValue: "confidence-value",
        hasHeadersValue: "has-headers-value",
        modelValue: "model-value",
        resultPlaceValue: "result-place-value",

        runProgressContainer: "run-progress-container",
        runProcessed: "run-processed",
        runTotalCells: "run-total-cells",
        runPercentage: "run-percentage",
        runStop: "run-stop",

        runExperiment: "run-experiment",
        runEditWarning: "run-edit-warning"
      }
    };


    const runState = {
      progress: 0,
      processed: 0,
      total: 0,

      stop: false,

      updateProgress() {
        this.progress = parseInt((this.processed / this.total) * 100);
      },
      clearRunState(dom) {
        this.progress = 0;
        this.processed = 0;
        this.total = 0;

        this.stop = false;

        dom.changeText(pages.run.runStop, "Stop");

        dom.changeText(pages.run.runTotalCells, this.total);
        dom.changeText(pages.run.runProcessed, this.processed);
        dom.changeText(pages.run.runPercentage, this.progress);
      }
    };


    // const Excel = {

    //   run: () => { },

    // };


    const EXCEL_EVENTS = {
      select: null
    };


    const formattedDate = (dateStr) => {
      const date = new Date(dateStr);
      const day = date.getDate();
      const month = date.getMonth() + 1;
      const year = date.getFullYear();

      if (month < 10) {
        return `${day}/0${month}/${year}`;
      } else {
        return `${day}/${month}/${year}`;
      }
    };


    const logoPlaceholder =
    "https://app.cogniflow.ai/static/media/img-placeholder.bf7d98c5.svg";


    const iconSvgExperimentTypeMap = {
      text: `<svg width="32" height="32" viewBox="0 0 32 32" style="display:flex;align-items:center;background-color:#eceffa;border-radius:8px;"><g fill="none" fill-rule="evenodd"><path fill="#a4a9c8" d="M24 21h-6c-.265 0-.52.107-.707.294l-.293.293V11.415L18.414 10H24v11zm-10 0H8V10h5.586L15 11.416v10.172l-.293-.293C14.52 21.106 14.265 21 14 21zM25 8h-7c-.265 0-.52.107-.707.293L16 9.586l-1.293-1.293c-.187-.186-.442-.292-.707-.292H7c-.552 0-1 .447-1 1v13c0 .551.448 1 1 1h6.586l1.707 1.706c.195.195.451.293.707.293.256 0 .512-.098.707-.293L18.414 23H25c.552 0 1-.448 1-1V9c0-.552-.448-1-1-1z"></path></g></svg>`,
      image: `<svg width="32" height="33" viewBox="0 0 32 33" style="display:flex;align-items:center;background-color:#eceffa;border-radius:8px;"><g fill="#A4A9C8" fill-rule="evenodd"><path d="M2 18v-1.52l3.93-3.14 2.36 2.37c.366.367.953.394 1.35.06l5.3-4.42L18 14.41V18H2zM18 2v9.59l-2.29-2.3c-.366-.367-.952-.393-1.35-.06l-5.3 4.42-2.35-2.36c-.361-.358-.933-.388-1.33-.07L2 13.92V2h16zm1-2H1C.448 0 0 .448 0 1v18c0 .553.448 1 1 1h18c.553 0 1-.447 1-1V1c0-.552-.447-1-1-1z" transform="translate(6 7)"></path><path d="M9 6c.552 0 1 .448 1 1s-.448 1-1 1-1-.448-1-1 .448-1 1-1m0 4c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3" transform="translate(6 7)"></path></g></svg>`,
      audio: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="display:flex;align-items:center;border-radius:8px;background-color:#eceffa;fill: #A4A9C8;transform: ;msFilter:;"><path d="M8 12c2.28 0 4-1.72 4-4s-1.72-4-4-4-4 1.72-4 4 1.72 4 4 4zm0-6c1.178 0 2 .822 2 2s-.822 2-2 2-2-.822-2-2 .822-2 2-2zm1 7H7c-2.757 0-5 2.243-5 5v1h2v-1c0-1.654 1.346-3 3-3h2c1.654 0 3 1.346 3 3v1h2v-1c0-2.757-2.243-5-5-5zm9.364-10.364L16.95 4.05C18.271 5.373 19 7.131 19 9s-.729 3.627-2.05 4.95l1.414 1.414C20.064 13.663 21 11.403 21 9s-.936-4.663-2.636-6.364z"></path><path d="M15.535 5.464 14.121 6.88C14.688 7.445 15 8.198 15 9s-.312 1.555-.879 2.12l1.414 1.416C16.479 11.592 17 10.337 17 9s-.521-2.592-1.465-3.536z"></path></svg>`
    };


    const experimentTemplate = ({ id, title, type, task, created_at, logo,
    ...rest }) => {
      const typeString = EXPERIMENT_TYPES[type];
      const taskString = EXPERIMENT_TASKS[task];
      const logoUrl = logo ? `${logoBaseUrl}${logo}` : logoPlaceholder;

      return `
      <div class="experiment-card" id="${id}">

        <div class="exp-card-header">
          <div class="exp-card-bg-img"></div>
          <div class="exp-card-header-logos">
            <div class="exp-card-logo-wrapper">
              <img src="${logoUrl}" class="exp-card-logo" alt="card logo">
            </div>
            <div class="exp-card-logo-type-wrapper">
              ${iconSvgExperimentTypeMap[EXPERIMENT_TYPES_URL[type]]}
            </div>

          </div>
        </div>
        
        <div class="exp-card-content">

          <div class="exp-card-title">
            <p title="${title}">${title}</p>
          </div>
          <div class="exp-card-body">
            <p>${typeString}/${taskString}</p>
          </div>
          <div class="exp-card-time">
            <p>
              Created: <span class="exp-card-time-label">${formattedDate(created_at)}</span>
            </p>
          </div>

        </div>
      </div>
      `;
    };


    const optionTemplate = ({ id, name, recommended }) => {
      const icon = recommended ? "âœ“" : "";

      return `
        <option value="${name}" id={${id}}>${name} ${icon}</option>
      `;
    };


    const setExperimentsInDom = (experiments, templateFunc, experimentsParentId,
    domHandler) => {
      const container = domHandler.getById(experimentsParentId);
      let allExperimentsTemplate = "";

      for (const exp of experiments) {
        allExperimentsTemplate += templateFunc(exp);
      }
      container.innerHTML = allExperimentsTemplate;
    };


    const setModelOptionsInDom = (models, idSelect, domHandler) => {
      const domSelectElement = domHandler.getById(idSelect);
      let allModels = "";

      for (const model of models) {
        allModels += optionTemplate(model);
      }
      domSelectElement.innerHTML = allModels;
    };


    const setRecommendedModel = () => {
      if (!EXPERIMENT.current.id_recommended_model) {
        EXPERIMENT.currentModel = {
          recommended: true,
          ...EXPERIMENT.models[0]
        };
        return;
      }

      const recommendedIdx = EXPERIMENT.models.findIndex((model) => EXPERIMENT.current.id_recommended_model === model.id);

      EXPERIMENT.currentModel = {
        recommended: true,
        ...EXPERIMENT.models[recommendedIdx]
      };
      EXPERIMENT.models[recommendedIdx] = EXPERIMENT.models[0];
      EXPERIMENT.models[0] = EXPERIMENT.currentModel;
    };


    const findAndSetModelByName = (modelName) => {
      EXPERIMENT.currentModel = EXPERIMENT.models.find(({ name }) => name === modelName);
    };


    const setColumnAtTheRight = async (range, sheet, context, isConfidence =
    false) => {
      const nextEntireCol = range
        .getEntireColumn()
        .getColumnsAfter(1)
        .insert("Right");

      nextEntireCol.load("address");
      nextEntireCol.load("values");

      await context.sync();

      const newColChar = nextEntireCol.address.split("!")[1][0];
      const [startCell, endCell] = range.address.split("!")[1].split(":");
      const [_, startIdx] = startCell;
      const endIdx = endCell ? endCell[1] : "";

      const insertedColumnRangeStr = endIdx
        ? `${newColChar}${startIdx}:${newColChar}${endIdx}`
        : `${newColChar}${startIdx}`;
      const newInsertedColumnRange = sheet.getRange(insertedColumnRangeStr);

      if (EXPERIMENT.hasHeaders) {
        if (isConfidence) {
          const titleCellRange = sheet.getRange(`${newColChar}1`);
          titleCellRange.values = [["Confidence"]];
        } else {
          const titleCellRange = sheet.getRange(`${newColChar}1`);
          titleCellRange.values = [[EXPERIMENT.current.title]];
        }
      }

      newInsertedColumnRange.load("values");
      newInsertedColumnRange.load("address");

      console.log(insertedColumnRangeStr);

      await context.sync();

      return newInsertedColumnRange;
    };


    const columnToPlaceResultMap = {
      insertRight: (range) => range.getColumnsAfter(1),
      replaceRight: (range) => range.getColumnsAfter(1)
    };


    const isEntireColumn = (address) => {
      const [addressStart, addressEnd] = address.split(":");

      return addressStart === addressEnd || addressStart.length === 1;
    };


    const delayRequest = (time) =>
      new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, time);
      });

    const getNextFromChar = (char, n = 0) =>
    String.fromCharCode(char.charCodeAt() + n);


    const getColumnNameFromRange = (rangeStr) => rangeStr.split("")[0];


    const getColmunStartIndex = (rangeStr) => {
      const [startCell] = rangeStr.split(":");
      const [_, ...nums] = startCell.split("");
      const index = nums.join("");

      return parseInt(index);
    };


    const getEntireColumnRangeString = async (sheet, context, forInsertResult =
    false) => {
      const range = sheet.getUsedRange();
      const columnLetter = getColumnNameFromRange(EXPERIMENT.colRange);
      const letterIndex = columnLetter.charCodeAt() - 65;
      const start = EXPERIMENT.hasHeaders ? 1 : 0;
      let endIdx = start;

      range.load("values");
      await context.sync();
      for (endIdx; endIdx < range.values.length; endIdx++) {
        if (!range.values[endIdx][letterIndex]) break;
      }
      return `${columnLetter}${start + 1}:${columnLetter}${endIdx}`;
    };


    function removeExcelEvent() {
      EXCEL_EVENTS.select.remove();
      return Excel.run(EXCEL_EVENTS.select.context, function(context) {
        return context.sync().then(function() {
          EXCEL_EVENTS.select = null;
          // console.log("Event handler successfully removed.");
        });
      });
    }


    function logout(router) {}


    const testToken = "";

    //
    "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmMDk0Mjg4Yi0wYWFjLTRhYWQtOGRmNi00NjhlZTY4OWEwNGUiLCJhY2NvdW50X3R5cGUiOjMsImV4cCI6MTY0Njg1NjEwM30.Qc222N0PhQjdBAP84aCc979rmoCWkK9AKq1ddnk2yzY";


    function wait(delay) {
      return new Promise((resolve) => setTimeout(resolve, delay));
    }


    function fetchRetry(url, delay, tries, fetchOptions = {}) {
      function onError(err) {
        triesLeft = tries - 1;
        if (!triesLeft) {
          throw err;
        }
        return wait(delay).then(() => fetchRetry(url, delay, triesLeft, fetchOptions));
      }
      return fetch(url, fetchOptions).catch(onError);
    }

    class HttpService {
      constructor(baseUrl) {
        this.headers = {
          "Content-Type": "application/json"
        };
        this.baseUrl = baseUrl;

        testToken && this.setTokenInHeaders(testToken);
      }

      setTokenInHeaders(token) {
        this.headers = { Authorization: `Bearer ${token}`, ...this.headers };
      }

      req(method) {
        return (url, body, headers, type = "normal") => {
          if (type === "normal") {
            return fetch(`${this.baseUrl}/${url}`, {
              method,
              headers: { ...this.headers, ...(headers ?? {}) },
              body: body
            })
              .then((res) => {
                if (!res.ok) {
                  const error = new Error("HTTP status code: " + res.status);
                  error.response = res;
                  error.status = res.status;
                  throw error;
                }
                return res.json();
              })
              .then((body) => {
                return body;
              });
          } else {
            return fetchRetry(`${this.baseUrl}/${url}`, 120000, 200, {
              method,
              headers: { ...this.headers, ...(headers ?? {}) },
              body: body
            })
              .then((res) => {
                if (!res.ok) {
                  const error = new Error("HTTP status code: " + res.status);
                  error.response = res;
                  error.status = res.status;
                  throw error;
                }
                return res.json();
              })
              .then((body) => {
                return body;
              });
          }
        };
      }
      get = this.req("GET");
      post = this.req("POST");
    }


    class DomHandler {
      getById(id) {
        return document.getElementById(id);
      }

      getElementsByClass(className) {
        return document.getElementsByClassName(className);
      }

      hidePage(pageId) {
        this.getById(pageId).style.display = "none";
      }
      showPage(pageId) {
        this.getById(pageId).style.display = "block";
      }

      addEvent(elementId, eventName, callback) {
        this.getById(elementId).addEventListener(eventName, callback);
      }

      addEventToElements(elementsClass, eventName, callback) {
        const elements = this.getElementsByClass(elementsClass);

        for (const element of elements) {
          element.addEventListener(eventName, callback);
        }
      }

      changeText(elementId, text) {
        this.getById(elementId).innerText = text;
      }

      removeListenersFromNode(nodeId) {
        const el = document.getElementById(nodeId);
        const elClone = el.cloneNode(true);

        el.parentNode.replaceChild(elClone, el);
      }
    }


    class PageStateHandler {
      constructor(initialPageId, domHandler) {
        this.current = initialPageId;
        this.history = [this.current];
        this.dom = domHandler;

        this.dom.showPage(initialPageId);
      }

      updateForwardPageState(newPageId) {
        this.history.push(newPageId);
        this.current = this.history[this.history.length - 1];
      }

      switchPagesVisibility(visible, toShow) {
        this.dom.hidePage(visible);
        this.dom.showPage(toShow);
      }

      navigateTo(newPageId) {
        this.switchPagesVisibility(this.current, newPageId);
        this.updateForwardPageState(newPageId);
      }

      navigateToSubPage(currentSubPage, newSubPage) {
        this.switchPagesVisibility(currentSubPage, newSubPage);
      }
    }


    async function runExcelAPI(dom) {
      if (EXPERIMENT.colRange.length === 1) {
        const colLetter = getColumnNameFromRange(EXPERIMENT.colRange);

        EXPERIMENT.colRange = `${colLetter}:${colLetter}`;
      }

      const { showConfidence, currentModel, insertPlace } = EXPERIMENT;
      let { colRange } = EXPERIMENT;

      const httpPredict = new HttpService(PREDICT_API_URL);

      Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        if (isEntireColumn(colRange)) {
          colRange = await getEntireColumnRangeString(sheet, context);
        } else {
          const selectedRange = sheet.getRange(colRange);

          selectedRange.load("values");
          await context.sync();

          const start = getColmunStartIndex(colRange);
          const columnName = getColumnNameFromRange(colRange);
          let end = start;

          for (const [val] of selectedRange.values) {
            if (!val) break;
            end++;
          }
          if (end !== start) {
            colRange = `${columnName}${start}:${columnName}${end - 1}`;
          }
        }
        const range = sheet.getRange(colRange);

        range.load("values");
        range.load("address");

        await context.sync();

        const requestInterval = {
          text: {
            time: 1000,
            limit: 5
          },
          image: {
            time: 1000,
            limit: 2
          },
          audio: {
            time: 1000,
            limit: 1
          },

          index: 0
        };
        const column = range.values;
        let requests = [];
        let idx = 0;
        let prev = 0;

        //  -------------------------------------------------------------------------------------

        runState.total = column.length;

        const typeUrl = EXPERIMENT_TYPES_URL[EXPERIMENT.current.type];
        const task = URL_TASK_MAP[EXPERIMENT.current.task];
        const currentModelId = currentModel.id;

        async function fillCellsRequest(text, idx, data) {
          if (runState.stop) return;

          const responses = await Promise.allSettled(data);

          let resultText = [];
          if (EXPERIMENT.current.task === QANDA_TASK) {
            resultText = responses.map(({ value }) => [value.result[0].answer]);
          } else {
            resultText = responses.map(({ value }) => [value.result]);
          }
          const currrentColumnLetter = getColumnNameFromRange(colRange);
          const height = getColmunStartIndex(colRange);
          const responseRangeString = `${currrentColumnLetter}${prev + height}:${currrentColumnLetter}${idx + height}`;
          let responseRange = sheet.getRange(responseRangeString);

          responseRange.load("values");
          responseRange.load("address");
          await context.sync();

          responseRange = columnToPlaceResultMap[insertPlace](responseRange);

          responseRange.load("values");

          prev = idx + 1;
          responseRange.values = resultText;
          if (showConfidence) {
            let confidenceResponse = 0;
            if (EXPERIMENT.current.task === QANDA_TASK) {
              confidenceResponse = responses.map(({ value }) => [value.result[0].confidence]);
            } else {
              confidenceResponse = responses.map(({ value }) => [value.confidence_score]);
            }
            const confidenceColumn = columnToPlaceResultMap[insertPlace](responseRange);

            confidenceColumn.values = confidenceResponse;
          }
          requestInterval.index = -1;

          if (!runState.stop) {
            runState.processed = runState.processed + responses.length;
            runState.updateProgress();

            dom.changeText(pages.run.runTotalCells, runState.total);
            dom.changeText(pages.run.runProcessed, runState.processed);
            dom.changeText(pages.run.runPercentage, runState.progress);
          }

          await context.sync();
        }
        const currentType = EXPERIMENT.current.type;
        const fileFormatMap = {
          image: "jpg",
          audio: "mp3"
        };
        const format = fileFormatMap[EXPERIMENT_TYPES_URL[currentType]];
        const intervals = requestInterval[EXPERIMENT_TYPES_URL[currentType]];

        if (EXPERIMENT.insertPlace === "insertRight") {
          if (EXPERIMENT.showConfidence) {
            const newResultCol = await setColumnAtTheRight(range, sheet, context, false);
            await setColumnAtTheRight(newResultCol, sheet, context, true);
          } else {
            await setColumnAtTheRight(range, sheet, context, false);
          }
        }

        for (const cell of column) {
          if (runState.stop) break;
          const [text] = cell;
          const replaced = text.replace(/\n/g, "\\n");
          const bodyKey = REQUEST_BODY_KEYS[EXPERIMENT.current.task] || "url";

          requests.push(
            httpPredict.post(
              `${typeUrl}/${task}/${currentModelId}`,
              JSON.stringify({
                [bodyKey]: replaced,
                ...(format ? { format } : {})
              }),
              {
                accept: "application/json",
                "Content-Type": "application/json",
                "x-api-key": user.api_keys ? user.api_keys[0].key : {}
              },
              "retry"
            )
          );

          if (requestInterval.index === intervals.limit || idx === column.length - 1) {
            await fillCellsRequest(text, idx, requests);
            requests = [];
          }
          requestInterval.index += 1;
          idx += 1;
        }
        await context.sync();
        dom.getById(pages.run.runEditWarning).style.display = "none";
        dom.changeText(pages.run.runExperiment, "Run model");
      });
    }


    function setUpListeners(dom, router, pages, http) {
      const {
        login: {
          pageId: loginPageId,
          emailInput,
          passwordInput,
          loginButton,
          goToSecretTokenAuth,
          gotToNormalAuth,
          subPages: { defaultSubpage, secretToken },
          invalidCredentials
        },
        experiments: {
          pageId: expPageId,
          experimentCardsClassName,
          cardsContainer,
          visibilityDropdown,
          typeDropdown,
          logoutBtn
        },
        run: {
          pageId: runPageId,
          goBack: runPageGoBack,
          confidenceDd,
          includeHeadersContainer,
          hasHeadersCb,
          insertDd,
          modelDd,
          expValue,
          confidenceValue,
          hasHeadersValue,
          modelValue,
          resultPlaceValue,
          cellsRange,

          runProgressContainer,
          runProcessed,
          runTotalCells,
          runPercentage,
          runStop,

          runExperiment,
          runEditWarning
        }
      } = pages;

      const setLoginEvents = (cb) => {
        dom.addEvent(loginButton, "click", () => {
          const cred = {
            username: dom.getById(emailInput).value,
            password: dom.getById(passwordInput).value
          };
          http
            .post("login", new URLSearchParams({ ...cred }), {
              "Content-Type": "application/x-www-form-urlencoded"
            })
            .then((res) => {
              http.setTokenInHeaders(res.access_token);
              router.navigateTo(expPageId);
              dom.getById(invalidCredentials).style.display = "none";
              cb();
            })
            .catch((err) => {
              const messages = {
                422: "Sorry, something went wrong, please try later",
                400: "Invalid credencials, please try again"
              };
              dom.getById(invalidCredentials).style.display = "block";
              dom.getById(invalidCredentials).innerText = messages[err.status];
              dom.getById(loginButton).blur();
            });
        });
        dom.addEvent(goToSecretTokenAuth, "click", () => {
          router.switchPagesVisibility(defaultSubpage, secretToken);
        });
        dom.addEvent(gotToNormalAuth, "click", () => {
          router.switchPagesVisibility(secretToken, defaultSubpage);
        });
      };

      const setExperimentEvents = (cb) => {
        http
          .get("user/")
          .then((res) => {
            user = res;
          })
          .catch((err) => {
            console.log(err);
          });
        const appendExperimentListInDom = (experimentList) => {
          dom.getById(cardsContainer).innerHTML = "";

          setExperimentsInDom(experimentList, experimentTemplate, cardsContainer, dom);

          dom.addEventToElements(experimentCardsClassName, "click", (event) => {
            const selectedExperimentId = event.currentTarget.id;

            http.get(`experiment/${selectedExperimentId}`).then(({ models, ...rest }) => {
              EXPERIMENT.current = rest;
              EXPERIMENT.models = models;
              router.navigateTo(runPageId);
              cb();
            });
          });
        };

        http.get(`experiment/?${EXPERIMENT.query}`).then((response) => {
          EXPERIMENT.list = response.filter((experiment) => experiment.status === STATUS_FINISHED);
          appendExperimentListInDom(EXPERIMENT.list);
        });

        http.get(`experiment/public?${EXPERIMENT.query}`).then((response) => {
          EXPERIMENT.publicExperiments = response;
          dom.getById(visibilityDropdown).disabled = false;

          dom.addEvent(visibilityDropdown, "change", (event) => {
            const { value: visibility } = event.target;
            const experimentList = EXPERIMENT[visibility];
            EXPERIMENT.visibilityQuery = visibility === "publicExperiments" ? "public" : "";

            appendExperimentListInDom(experimentList);
          });
        });

        dom.addEvent(typeDropdown, "change", (event) => {
          const visibility = EXPERIMENT.visibilityQuery;
          const type = event.target.value;
          const typeQuery = type ? `type=${type}&&` : "";

          http.get(`experiment/${visibility}?${typeQuery}${EXPERIMENT.query}`).then((response) => {
            appendExperimentListInDom(response);
          });
        });

        dom.addEvent(logoutBtn, "click", () => {
          router.navigateTo(loginPageId);
          dom.removeListenersFromNode(expPageId);
        });
      };

      const setRunModelPageEvents = () => {
        setRecommendedModel();
        setModelOptionsInDom(EXPERIMENT.models, modelDd, dom);

        Excel.run((context) => {
          const sheet = context.workbook.worksheets.getActiveWorksheet();

          EXCEL_EVENTS.select = sheet.onSelectionChanged.add((event) => {
            dom.getById(cellsRange).value = event.address;
            EXPERIMENT.colRange = event.address;
            // dom.getById(includeHeadersContainer).style.display = isEntireColumn(event.address) ? "flex" : "none";
          });

          return context.sync();
        });

        dom.changeText(expValue, EXPERIMENT.current.title);
        // dom.changeText(confidenceValue, false);
        // dom.changeText(resultPlaceValue, 'insertRight');
        // dom.changeText(modelValue, EXPERIMENT.currentModel.name);

        dom.addEvent(runPageGoBack, "click", () => {
          dom.changeText(pages.run.runStop, "Run model");
          runState.clearRunState(dom);
          EXPERIMENT.insertPlace = "insertRight";
          dom.removeListenersFromNode(runPageId);
          router.navigateTo(expPageId);
          removeExcelEvent();
        });
        dom.addEvent(cellsRange, "keyup", (e) => {
          EXPERIMENT.colRange = e.target.value;
          // dom.getById(includeHeadersContainer).style.display = isEntireColumn(e.target.value) ? "flex" : "none";
        });
        dom.addEvent(confidenceDd, "change", ({ target: { checked } }) => {
          EXPERIMENT.showConfidence = checked;
          // dom.changeText(confidenceValue, checked);
        });
        dom.addEvent(hasHeadersCb, "change", ({ target: { checked } }) => {
          EXPERIMENT.hasHeaders = checked;
          // dom.changeText(hasHeadersValue, checked);
        });
        dom.addEvent(insertDd, "change", ({ target: { value } }) => {
          EXPERIMENT.insertPlace = value;
          // dom.changeText(resultPlaceValue, value);
        });
        dom.addEvent(modelDd, "change", ({ target: { value } }) => {
          findAndSetModelByName(value);
          // dom.changeText(modelValue, value);
        });
        dom.addEvent(runExperiment, "click", () => {
          if (dom.getById(runExperiment).innerText === "Stop") {
            dom.changeText(runTotalCells, 0);
            dom.changeText(runProcessed, 0);
            dom.changeText(runPercentage, 0);
            runState.stop = true;
            dom.changeText(runExperiment, "Run model");
            dom.getById(runEditWarning).style.display = "none";
            return;
          }
          try {
            runState.clearRunState(dom);
            runExcelAPI(dom);
            dom.getById(runEditWarning).style.display = "block";
            dom.changeText(runExperiment, "Stop");
          } catch (e) {
            console.error(e);
            alert(
              'Sorry, something went wrong, please verify you typed a correct range value.\n For example: "A2:A10" of "B:B"'
            );
          }
        });
      };

      setLoginEvents(() => setExperimentEvents(setRunModelPageEvents));

      testToken && setExperimentEvents(setRunModelPageEvents);
      // setRunModelPageEvents();
    }


    const http = new HttpService(API_URL);

    const domHandler = new DomHandler();


    // let router = "";

    let router = new PageStateHandler(pages.login.pageId, domHandler);

    if (testToken) {
      // Uncomment line below to start from experiments page
      router = new PageStateHandler(pages.experiments.pageId, domHandler);

      // Uncomment line below to start from model page
      // router = new PageStateHandler(pages.run.pageId, domHandler);
    }


    setUpListeners(domHandler, router, pages, http);
  language: typescript
template:
  content: "<main>\n\t<div class=\"app-wrapper\">\n\t\t<div id=\"page-login\" class=\"app-page\">\n\t\t\t<div class=\"login__logo-wrapper\">\n\t\t\t\t<svg id=\"Capa_1\" data-name=\"Capa 1\" viewBox=\"0 0 841.89 235.28\" height=\"100px\">\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<style>\n\t\t\t\t\t\t\t.cls-1 {\n\t\t\t\t\t\t\t\tfill: #141624;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.cls-2 {\n\t\t\t\t\t\t\t\tfill: #eb5e60;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.cls-3 {\n\t\t\t\t\t\t\t\tfill: none;\n\t\t\t\t\t\t\t\tstroke: #eb5e60;\n\t\t\t\t\t\t\t\tstroke-linecap: round;\n\t\t\t\t\t\t\t\tstroke-miterlimit: 10;\n\t\t\t\t\t\t\t\tstroke-width: 14px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</style>\n\t\t\t\t\t</defs>\n\t\t\t\t\t<title>1a</title>\n\t\t\t\t\t<path class=\"cls-1\"\n\t\t\t\t\t\td=\"M169.59,144.1a30.6,30.6,0,0,1,0-43.49v-.06h0a30.72,30.72,0,0,1,41.44-1.86,5.32,5.32,0,0,1,2,3.1c.07.9.11,1.44.11,1.63a6.16,6.16,0,0,1-1.41,3.88c-1.12,1.32-2.13,2-3,2.09s-1.4.11-1.55.11a6.56,6.56,0,0,1-4.05-1.41,18.53,18.53,0,0,0-24.94,27.36,18.54,18.54,0,0,0,24.94,1.13,6.16,6.16,0,0,1,3.88-1.41,6,6,0,0,1,4.73,2.2,6.18,6.18,0,0,1-.73,8.61,30.18,30.18,0,0,1-9.29,5.29,29.35,29.35,0,0,1-10.41,1.86A29.75,29.75,0,0,1,169.59,144.1Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-1\"\n\t\t\t\t\t\td=\"M244,144.1a30.72,30.72,0,0,1,0-43.49l.05-.06a30.8,30.8,0,0,1,52.53,21.79A30.78,30.78,0,0,1,244,144.1Zm34.85-8.67a18.52,18.52,0,1,0-13.09,5.43A17.84,17.84,0,0,0,278.88,135.43Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-1\"\n\t\t\t\t\t\td=\"M335.54,176.5a30.56,30.56,0,0,1-9.51-7.32,6.18,6.18,0,0,1-1.47-4,6.06,6.06,0,0,1,2.09-4.62,6,6,0,0,1,3.94-1.52,6.12,6.12,0,0,1,4.67,2.09,19.75,19.75,0,0,0,5.74,4.44,18.07,18.07,0,0,0,8.22,1.92,18.64,18.64,0,0,0,18.52-18.58v-2a30.82,30.82,0,0,1-49.37-24.54,29.63,29.63,0,0,1,9.06-21.73v-.06a30.78,30.78,0,0,1,43.52,0A30.78,30.78,0,0,1,380,122.17v26.74a30.86,30.86,0,0,1-30.8,30.8A30.18,30.18,0,0,1,335.54,176.5Zm26.74-41.07a18.53,18.53,0,1,0-13.06,5.43A17.82,17.82,0,0,0,362.28,135.43Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-1\"\n\t\t\t\t\t\td=\"M442.33,151.33a5.91,5.91,0,0,1-1.8-4.33V114.23a9,9,0,0,0-3.55-7,15.46,15.46,0,0,0-19.42,0,9,9,0,0,0-3.55,7V147a6.15,6.15,0,0,1-6.13,6.13,5.82,5.82,0,0,1-4.31-1.8A6,6,0,0,1,401.8,147V97.62a6,6,0,0,1,6.08-6.08,6,6,0,0,1,5.63,3.6,26.9,26.9,0,0,1,13.79-3.6,26.22,26.22,0,0,1,17.62,6.36q7.89,6.7,7.88,16.33V147a6.13,6.13,0,0,1-10.47,4.33Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-1\"\n\t\t\t\t\t\td=\"M476.38,78.14a5.9,5.9,0,0,1-1.8-4.33V71.05a6.14,6.14,0,0,1,12.28,0v2.76a6.14,6.14,0,0,1-10.48,4.33Zm0,73.19a5.91,5.91,0,0,1-1.8-4.33V97.62a5.84,5.84,0,0,1,1.8-4.31,6.19,6.19,0,0,1,8.67,0,5.85,5.85,0,0,1,1.81,4.31V147a6.14,6.14,0,0,1-10.48,4.33Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-2\"\n\t\t\t\t\t\td=\"M510.8,177.93a5.87,5.87,0,0,1-1.77-4.31V122.34a29.7,29.7,0,0,1,9-21.73l.05-.06a29.74,29.74,0,0,1,21.74-9,6,6,0,0,1,4.33,1.77,5.84,5.84,0,0,1,1.8,4.31,6.15,6.15,0,0,1-6.13,6.14,18.64,18.64,0,0,0-18.58,18.58v18.52h18.58a6.14,6.14,0,0,1,0,12.27H521.25v20.49a6.08,6.08,0,0,1-6.08,6.09A6,6,0,0,1,510.8,177.93Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-2\"\n\t\t\t\t\t\td=\"M588.57,153.13a20.91,20.91,0,0,1-20.83-20.83V71.05a6.14,6.14,0,0,1,12.28,0V132.3a8.55,8.55,0,0,0,8.55,8.56h10.81a5.91,5.91,0,0,1,4.37,1.8,6.19,6.19,0,0,1,0,8.67,5.91,5.91,0,0,1-4.37,1.8Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-2\"\n\t\t\t\t\t\td=\"M630.7,144.1a30.72,30.72,0,0,1,0-43.49l.05-.06a30.8,30.8,0,0,1,52.53,21.79A30.78,30.78,0,0,1,630.7,144.1Zm34.85-8.67a18.52,18.52,0,1,0-13.09,5.43A17.88,17.88,0,0,0,665.55,135.43Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<path class=\"cls-2\"\n\t\t\t\t\t\td=\"M761.62,152.79a6.22,6.22,0,0,1-3.55-3l-11.76-23.53-11.77,23.53a5.86,5.86,0,0,1-2.7,2.71,6.36,6.36,0,0,1-2.76.67,5.64,5.64,0,0,1-1.92-.34,6.18,6.18,0,0,1-3.54-3L699,100.38a6.37,6.37,0,0,1-.68-2.76,5.83,5.83,0,0,1,.34-1.91,6.3,6.3,0,0,1,3-3.55,6.47,6.47,0,0,1,2.7-.62,5.88,5.88,0,0,1,5.52,3.38l19.2,38.45,11.76-23.53a5.92,5.92,0,0,1,5.47-3.38,6.3,6.3,0,0,1,2.75.68,5.91,5.91,0,0,1,2.71,2.7l11.76,23.53,19.2-38.45a5.88,5.88,0,0,1,5.52-3.38,6.47,6.47,0,0,1,2.7.62,5.84,5.84,0,0,1,3.38,5.46,6.37,6.37,0,0,1-.68,2.76L769,149.75a6.21,6.21,0,0,1-2.75,2.71,6.05,6.05,0,0,1-2.71.67A5.62,5.62,0,0,1,761.62,152.79Z\">\n\t\t\t\t\t</path>\n\t\t\t\t\t<polyline class=\"cls-3\" points=\"75.47 79.2 47.03 119.07 75.47 164.07\"></polyline>\n\t\t\t\t\t<polyline class=\"cls-3\" points=\"113.2 79.2 84.76 119.07 113.2 164.07\"></polyline>\n\t\t\t\t\t<line class=\"cls-3\" x1=\"101.72\" y1=\"145.91\" x2=\"133.07\" y2=\"104.48\"></line>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<section class=\"login__form-section\">\n\t\t\t\t<div class=\"login__form-wrapper\">\n\t\t\t\t\t<p class=\"cogni__title mb-md\">Log in to continue</p>\n\t\t\t\t\t<div class=\"px-sm\" id=\"login-default-form\">\n\t\t\t\t\t\t<div class=\"login__form-field mb-sm\">\n\t\t\t\t\t\t\t<p class=\"cogni__md-text wg-md\">Email</p>\n\t\t\t\t\t\t\t<input\n                id=\"login-email-field\"\n                class=\"cogni__form-input w-100\"\n                placeholder=\"Your email\"\n                type=\"email\"\n                required\n              />\n            </div>\n\t\t\t\t\t\t\t<div class=\"login__form-field mb-sm\">\n\t\t\t\t\t\t\t\t<p class=\"cogni__md-text wg-md\">Password</p>\n\t\t\t\t\t\t\t\t<input\n                id=\"login-password-field\"\n                class=\"cogni__form-input w-100\"\n                placeholder=\"Password\"\n                type=\"password\"\n                required\n              />\n            </div>\n\t\t\t\t\t\t\t\t<div class=\"login__form-field\">\n\t\t\t\t\t\t\t\t\t<p class=\"cogni__link cogni__text-xs login__secret-token-link\"\n\t\t\t\t\t\t\t\t\t\tid=\"login-go-to-secret\">\n\t\t\t\t\t\t\t\t\t\t<!-- Use a secret token instead -->\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"login__form-field mt-sm\">\n\t\t\t\t\t\t\t\t\t<button\n                id=\"default-login-button\"\n                class=\"w-100 cogni__type__main py-sm login__form-button\"\n                type=\"button\"\n              >\n                Login\n              </button>\n\t\t\t\t\t\t\t\t\t<p class=\"mt-sm login-error\" id=\"login-invalid-creds\">\n\t\t\t\t\t\t\t\t\t\tInvalid credentials, please try again\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"px-sm d-none\" id=\"login-use-secret-token\">\n\t\t\t\t\t\t\t\t<div class=\"login__form-field mb-sm\">\n\t\t\t\t\t\t\t\t\t<p class=\"cogni__md-text wg-md\">Authentication token</p>\n\t\t\t\t\t\t\t\t\t<input\n                class=\"cogni__form-input w-100\"\n                placeholder=\"Ask for your access token\"\n                required\n              />\n            </div>\n\t\t\t\t\t\t\t\t\t<div class=\"login__form-field\">\n\t\t\t\t\t\t\t\t\t\t<p class=\"cogni__link cogni__text-xs login__secret-token-link\"\n\t\t\t\t\t\t\t\t\t\t\tid=\"login-go-to-normal-auth\">\n\t\t\t\t\t\t\t\t\t\t\tUse normal authentication instead\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"login__form-field mt-sm\">\n\t\t\t\t\t\t\t\t\t\t<button\n                id=\"default-login-button\"\n                class=\"w-100 cogni__type__main py-sm login__form-button\"\n                type=\"button\"\n              >\n                Login using token\n              </button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t\t<div id=\"page-experiments\" class=\"app-page\">\n\t\t\t<div class=\"cogni__navbar mb-xs main-navbar\">\n\t\t\t\t<div class=\"navbar__logo-text\">\n\t\t\t\t\t<div class=\"navbar__logo\">\n\t\t\t\t\t\t<img\n              height=\"30\"\n              src=\"https://media-exp1.licdn.com/dms/image/C4E0BAQFJHyVpoH4QuA/company-logo_200_200/0/1630606332593?e=2159024400&v=beta&t=qcXVSsYYBTcdeX0e-Cx8q5cxStydyPjhEWyEZcYaj0Y\"\n              alt=\"Cogniflow logo\"\n            />\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n            id=\"experiments-visibility-dropdown\"\n            class=\"cogni__default-select experiments-select\"\n            disabled\n          >\n            <option value=\"list\">Private experiments</option>\n            <option value=\"publicExperiments\">Public experiments</option>\n          </select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n            id=\"experiments-type-dropdown\"\n            class=\"cogni__default-select experiments-select\"\n          >\n            <!-- option value=\"\">All types</option -->\n            <option value=\"0\">Text</option>\n            <!-- option value=\"1\">Image</option>\n            <option value=\"2\">Audio</option> -->\n          </select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"cogni__nav-link\" id=\"logout\">\n\t\t\t\t\t\t<p>Logout</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<section id=\"experiments-list\" class=\"p-md\">\n\t\t\t\t\t<div class=\"experiments-options\">\n\t\t\t\t\t\t<!-- <div class=\"experiments-searchbar-wrapper mb-sm\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        class=\"cogni__form-input experiments-search-input\"\n                      />\n                      <button>O</button>\n                    </div> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"experiment-cards\" id=\"experiment-cards-container\">\n\t\t\t\t\t\t<!-- DYNAMIC HERE -->\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t\t<div id=\"pages-run-model\" class=\"app-page\">\n\t\t\t\t<div class=\"cogni__navbar mb-sm\">\n\t\t\t\t\t<button\n          id=\"pages-run-model-go-back\"\n          class=\"cogni__goback-button experiment-go-back\"\n        >\n          &#8592;\n        </button>\n\t\t\t\t\t<p id=\"experiment-value\" class=\"experiment-name\">Experiment name</p>\n\t\t\t\t\t<div class=\"experiment-nav-item-void\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"p-md\">\n\t\t\t\t\t<div class=\"run-options-bar\">\n\t\t\t\t\t\t<div class=\"run-dropdowns-wrapper\">\n\t\t\t\t\t\t\t<div class=\"run-select-field\">\n\t\t\t\t\t\t\t\t<p>Model to use</p>\n\t\t\t\t\t\t\t\t<select\n                name=\"\"\n                id=\"run-model-dropdown\"\n                class=\"cogni__default-select\"\n              >\n                <!-- Dynamic data -->\n              </select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"run-select-field\">\n\t\t\t\t\t\t\t\t<p>Place result</p>\n\t\t\t\t\t\t\t\t<select\n                name=\"\"\n                id=\"run-insert-dropdown\"\n                class=\"cogni__default-select\"\n              >\n                <option value=\"insertRight\">Insert results at the right</option>\n                <option value=\"replaceRight\"\n                  >Replace values at the right</option\n                >\n              </select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"p-md run-cells-range\">\n\t\t\t\t\t\t<div class=\"run-cells-range-items run-range-input-wrapper\">\n\t\t\t\t\t\t\t<p>Cells range or column</p>\n\t\t\t\t\t\t\t<input\n              type=\"text\"\n              placeholder=\"Example: A2:A10\"\n              id=\"run-cells-range\"\n              class=\"cogni__form-input\"\n              value=\"A2:A5\"\n            />\n          </div>\n\t\t\t\t\t\t\t<div class=\"run-cells-range-items\">\n\t\t\t\t\t\t\t\t<p class=\"run-checkbox-label\">Show confidence</p>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"run-show-confidence-checkbox\" />\n          </div>\n\t\t\t\t\t\t\t\t<!-- <div class=\"run-cells-range-items\" id=\"run-include-headers-container\" style=\"display: none\">\n            <p class=\"run-checkbox-label\">My sheet includes headers</p>\n            <input type=\"checkbox\" id=\"run-show-has-headers\" checked />\n          </div> -->\n\t\t\t\t\t\t\t\t<div class=\"run-cells-range-items\" id=\"run-include-headers-container\">\n\t\t\t\t\t\t\t\t\t<p class=\"run-checkbox-label\">My sheet includes headers</p>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"run-show-has-headers\" checked />\n          </div>\n\t\t\t\t\t\t\t\t\t<!-- <input type=\"checkbox\" id=\"run-show-has-headers\" /> -->\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"mt-md mb-md\"></div>\n\t\t\t\t\t\t\t\t<div class=\"run-progress-wrapper mb-sm\" id=\"run-progress-container\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\tProgress:&nbsp;\n\t\t\t\t\t\t\t\t\t\t<span id=\"run-processed\">0</span> /\n\t\t\t\t\t\t\t\t\t\t<span id=\"run-total-cells\">0</span>&nbsp;(<span id=\"run-percentage\"\n              >0</span>%)\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<button id=\"run-stop\">Stop</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"run-experiment-wrapper\">\n\t\t\t\t\t\t\t\t\t<button class=\"run-experiment-button\" id=\"run-experiment\">\n            Run model\n          </button>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<p class=\"edit-warning\" id=\"run-edit-warning\" style=\"display: none;\">\n\t\t\t\t\t\t\t\t\t\tIMPORTANT: do not edit anything in the spreadsheet until the process\n\t\t\t\t\t\t\t\t\t\tcompletes 100%\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n</main>"
  language: html
style:
  content: >-
    @import
    url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,200;0,400;0,500;0,600;0,700;1,500&display=swap");


    /* FONT PROPS
     * -----------------------------------
     * font-family: 'Nunito', sans-serif;
     * font-weight: 400/600/700
     */

    :root {
      --main-font-family: Poppins, sans-serif;

      --blue-100: #d6d9ea;
      --blue-200: #a4a9c8;
      --blue-800: #272c4d;

      --orange-400: #fd9690;
      --orange-500: #ff6a61;

      --red-500: #f44336;

      --gray-200: #f8f8ff;
      --gray-300: #cdcdcd;
      --gray-400: #949494;
      --gray-500: #727272;

      --tex-size-xs: 10px;
      --tex-size-sm: 12px;
      --text-size-md: 16px;
      --tex-size-lg: 28px;
    }

    .cogni__type__main {
      background-color: var(--orange-500);
      color: white;
      border: none;
    }


    .cogni__title {
      font-family: var(--main-font-family);
      font-weight: 700;
      font-size: var(--tex-size-lg);
    }


    .cogni__sm-text {
      font-size: 12px;
    }

    .cogni__md-text {
      font-size: 16px;
    }


    .cogni__form-input {
      outline: 0;
      border-width: 0 0 1px 0;
      border-color: var(--gray-400);
      transition: ease-in 0.2s;
      height: 35px;
      box-sizing: border-box;
      font-family: var(--main-font-family);
    }

    .cogni__form-input:focus {
      border-width: 0 0 2px 0;
      border-color: var(--gray-400);
    }

    .cogni__form-input:hover {
      border-width: 0 0 2px 0;
      border-color: #202020;
    }

    .cogni__form-input::placeholder {
      font-family: var(--main-font-family);
      font-size: var(--tex-size-sm);
    }


    .cogni__link {
      color: var(--orange-500);
      text-decoration: underline;
      cursor: pointer;
    }


    .cogni__navbar {
      flex-wrap: wrap;
      gap: 12px;
      display: flex;
      align-items: center;
      padding: 12px;
      border-bottom: 1px solid var(--blue-100);
    }


    .cogni__nav-link {
      cursor: pointer;
      padding: 3px 12px;
      border-radius: 3px;
      background-color: var(--orange-500);
    }


    .cogni__nav-link p {
      color: white;
    }


    .cogni__goback-button {
      border: none;
      padding: 2px 8px;
    }


    .cogni__default-select {
      padding: 8px 12px;
      border-radius: 5px;
      border: 1px solid var(--blue-200);
      outline: none;
      cursor: pointer;
    }


    .navbar__logo {
      display: flex;
      align-items: center;
      cursor: pointer;
    }


    .navbar__logo-text {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }


    .cogni__text-xs {
      font-family: var(--main-font-family);
      font-size: var(--tex-size-sm);
    }


    .mr-sm {
      margin-right: 12px;
    }

    .mr-xs {
      margin-right: 8px;
    }

    .mr-md {
      margin-right: 16px;
    }

    .mb-sm {
      margin-bottom: 12px;
    }

    .mb-md {
      margin-bottom: 24px;
    }

    .mt-sm {
      margin-top: 12px;
    }

    .mt-md {
      margin-top: 24px;
    }

    .mt-lg {
      margin-top: 42px;
    }


    .w-100 {
      width: 100%;
    }


    .p-md {
      padding: 16px;
    }


    .px-sm {
      padding-left: 12px;
      padding-right: 12px;
    }

    .py-sm {
      padding-top: 12px;
      padding-bottom: 12px;
    }


    .py-md {
      padding-top: 16px;
      padding-bottom: 16px;
    }


    .wg-md {
      font-weight: 600;
    }


    .d-none {
      display: none;
    }


    main,

    p,

    li,

    ul {
      margin: 0;
      padding: 0;
    }

    main {
      background-color: var(--gray-200);
    }

    p {
      font-family: "Nunito", sans-serif;
      color: var(--blue-800);
    }


    button {
      background-color: white;
      border: 1px var(--gray-400) solid;
      padding: 8px 16px;
      font-family: var(--main-font-family);
      border-radius: 5px;
      font-weight: 700;
      color: var(--blue-800);
      cursor: pointer;
      font-size: var(--tex-size-md);
    }

    input[type="checkbox"] {
      cursor: pointer;
    }


    .app-wrapper {
      margin: auto;
      max-width: 600px;
      padding: 32px;
    }

    .app-page {
      background-color: white;
      border-radius: 10px;
      -webkit-box-shadow: 1px 3px 16px -3px #a4a9c8;
      box-shadow: 1px 3px 16px -3px #a4a9c8;
      display: none;
    }


    .login__logo-wrapper {
      height: 100px;
      display: flex;
      justify-content: center;
      padding: 16px 0;
      align-items: center;
      border-radius: 10px;
      background-color: #f8f8ff;
      opacity: 0.8;
      background: linear-gradient(135deg, #dedfeb55 25%, transparent 25%) -33px 0/ 66px 66px,
        linear-gradient(225deg, #dedfeb 25%, transparent 25%) -33px 0/ 66px 66px,
        linear-gradient(315deg, #dedfeb55 25%, transparent 25%) 0px 0/ 66px 66px,
        linear-gradient(45deg, #dedfeb 25%, #f8f8ff 25%) 0px 0/ 66px 66px;
    }

    .login__form-section {
      display: flex;
      flex-direction: column;
      justify-content: center;
      padding: 32px 32px 64px 32px;
      align-items: center;
    }

    .login__form-wrapper {
      width: 420px;
    }

    @media (max-width: 640px) {
      .login__form-wrapper {
        width: 350px;
      }
    }

    @media (max-width: 500px) {
      .login__form-wrapper {
        width: 100%;
      }
    }


    .login__secret-token-link {
      display: flex;
      justify-content: flex-end;
    }


    .login__form-button:hover {
      opacity: 0.9;
    }

    .login__form-button:focus {
      opacity: 0.6;
    }

    .login-error {
      text-align: center;
      color: var(--red-500);
      display: none;
    }


    /* Experiments styles */


    .main-navbar {
      justify-content: space-between;
    }


    .experiments-options {
      display: flex;
      justify-content: flex-end;
    }


    .experiments-select {
      border: none;
      background-color: var(--orange-500);
      color: white;
    }


    .experiments-searchbar-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--blue-100);
      border-radius: 5px;
    }

    .experiments-searchbar-wrapper button {
      padding: 0 initial;
      border: none;
      background-color: var(--blue-100);
      border-radius: 0;
      color: white;
    }


    .experiments-search-input {
      margin: 0;
      padding-left: 12px;
      border: none;
      color: var(--blue-200);
    }

    .experiments-search-input::placeholder {
      color: var(--blue-100);
    }


    .experiment-cards {
      display: flex;
      justify-content: space-evenly;
      flex-wrap: wrap;
      gap: 12px;
      padding-bottom: 12px;
    }


    .experiment-card {
      cursor: pointer;
      width: 150px;
      height: 150px;
      background-color: var(--gray-200);
      border-radius: 10px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      transition: ease-in 0.2s;
      position: relative;
      overflow: hidden;
    }


    .experiment-card:hover {
      -webkit-box-shadow: 1px 3px 16px -3px #a4a9c8;
      box-shadow: 1px 3px 16px -3px #a4a9c8;
    }

    .exp-card-header {
      position: relative;
      height: 40px;
    }

    .exp-card-bg-img {
      top: -10px;
      height: 40px;
      width: 110%;
      position: absolute;
      background-image: url("https://app.cogniflow.ai/img/imgTextPattern.png");
      transform: rotate(7deg);
    }

    .exp-card-header-logos {
      display: flex;
      position: relative;
      justify-content: space-between;
      align-items: center;
      padding: 6px;
    }

    .exp-card-logo-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      /* padding: 5px; */
      position: relative;
      background-color: white;
      width: 20px;
      height: 20px;
      /* margin: 8px 0 0 10px; */
      border-radius: 8px;
    }


    .exp-card-logo {
      width: 100%;
      height: 100%;
    }


    .exp-card-content {
      padding: 0 6px 6px 6px;
    }


    .exp-card-title {
      border-radius: 10px;
      display: flex;
      justify-content: center;
      background-color: #f8f8ff;
      /* opacity: 0.8;
      background: linear-gradient(135deg, #dedfeb55 25%, transparent 25%) -33px 0/
          66px 66px,
        linear-gradient(225deg, #dedfeb 25%, transparent 25%) -33px 0/ 66px 66px,
        linear-gradient(315deg, #dedfeb55 25%, transparent 25%) 0px 0/ 66px 66px,
        linear-gradient(45deg, #dedfeb 25%, #f8f8ff 25%) 0px 0/ 66px 66px; */

      padding: 10px 12px;
    }

    .exp-card-title p {
      color: var(--blue-800);
      font-size: var(--tex-size-md);
      text-align: center;
      line-height: 16px;
      font-weight: 700;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2; /* number of lines to show */
      line-clamp: 2;
      -webkit-box-orient: vertical;
    }

    .exp-card-body {
      padding: 0 16px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .exp-card-body p {
      font-size: 14px;
      text-align: center;
      line-height: 16px;
    }


    .exp-card-time {
      padding: 6px 12px;
    }

    .exp-card-time .exp-card-time-label {
      font-weight: 700;
    }

    .exp-card-time p {
      font-size: var(--tex-size-sm);
    }


    /* Run model page */


    .experiment-go-back,

    .experiment-name,

    .experiment-nav-item-void {
      flex: 1;
    }

    .experiment-go-back {
      display: flex;
    }

    .experiment-name {
      font-size: 18px;
      font-weight: 700;
      color: var(--blue-800);
      text-align: center;
    }


    .run-select-field div {
      display: flex;
      justify-content: center;
    }

    .run-select-field p {
      color: var(--orange-500);
      font-weight: 700;
      margin-bottom: 5px;
      font-size: var(--tex-size-sm);

      text-align: center;
    }

    .run-select-field select {
      border: none;
      outline: none;
      background-color: var(--orange-500);
      color: white;
      font-family: var(--main-font-family);
      font-weight: 700;
      text-align: center;
    }


    .run-select-field option {
      border: none;
      outline: none;
      font-weight: 700;
      padding: 16px 0;
    }


    .run-options-bar {
      display: flex;
      justify-content: flex-end;
      flex-wrap: wrap-reverse;
      gap: 12px;
    }


    .run-checkboxes-wrapper {
      display: flex;
      align-items: end;
      gap: 12px;
    }

    .run-dropdowns-wrapper {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      justify-content: center;
      width: 100%;
    }


    .run-experiment-wrapper {
      display: flex;
      justify-content: center;
    }


    .run-cells-range {
      padding-bottom: 0;
    }


    @media (max-width: 595px) {
      .run-cells-range {
        justify-content: center;
      }
    }

    .run-cells-range-items {
      display: flex;
      align-items: end;
      gap: 40px;
    }


    @media (max-width: 440px) {
      .run-range-input-wrapper {
        flex-direction: column;
        align-items: center;
        margin-bottom: 8px;
      }
      .run-cells-range-items {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0;
      }
      .run-cells-range-items .run-checkbox-label {
        /* width: 100%; */
        text-align: center;
      }
    }


    .run-cells-range-items p {
      font-size: var(--tex-size-md);
      font-weight: 700;
      color: var(--blue-800);
      width: 180px;
      text-align: end;
    }

    .run-cells-range-items .cogni__form-input {
      font-weight: 700;
      color: var(--orange-500);
      width: 80px;
    }


    .run-labels-wrapper {
      border: 1px solid var(--gray-300);
      border-radius: 5px;
    }


    .run-values {
      color: var(--blue-800);
      font-weight: 700;
    }

    .run-labels {
      display: flex;
      justify-content: space-between;
      border-bottom: 1px solid var(--gray-300);
      padding: 8px 0;
    }


    .run-labels:last-child {
      border-bottom: none;
    }


    .run-progress-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 12px;
    }

    .run-progress-wrapper p {
      display: flex;
      align-items: center;
    }

    .run-progress-wrapper button {
      padding: 0 12px;
      background-color: var(--orange-500);
      color: white;
      border: none;
      display: none;
    }


    .run-experiment-button {
      background-color: var(--orange-500);
      color: white;
      border: none;
    }


    .edit-warning {
      margin-top: 12px;
      background-color: #ffffce;
      text-align: center;
    }

    .active {
      display: block;
    }
  language: css
libraries: |
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  @types/office-js

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1
